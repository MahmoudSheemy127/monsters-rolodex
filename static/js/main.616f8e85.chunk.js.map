{"version":3,"sources":["Components/Card/Card.js","Components/card-list/card-list.component.jsx","Components/SearchBox/SearchBox-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","Monsters","name","CardList","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","Filter","state","SearchField","filter","toLowerCase","includes","e","setState","target","value","console","log","fetch","then","response","json","users","FilteredMonsters","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qVAGaA,G,MAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACf,yBAAKA,UAAU,QAAQC,IAAI,WAAWC,IAAK,oCAC3C,4BAAKH,EAAMI,SAASC,SCFTC,G,MAAW,SAAAN,GACtB,OAAO,yBAAKC,UAAU,aACnBD,EAAMI,SAASG,KAAI,SAAAH,GAAQ,OACzB,kBAAC,EAAD,CAAMI,IAAKJ,EAASK,GAAIL,SAAUA,UCH5BM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAEvB,2BAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC4C/DG,G,kBA5Cb,aACC,IAAD,8BACE,+CAaFC,OAAS,WACR,IAAD,EACkC,EAAKC,MAA9Bb,EADT,EACSA,SAAUc,EADnB,EACmBA,YAIjB,OAHyBd,EAASe,QAAO,SAAAf,GAAQ,OACjDA,EAASC,KAAKe,cAAcC,SAASH,EAAYE,mBAlBnD,EAsBAR,aAAe,SAACU,GAEd,EAAKC,SAAS,CAACL,YAAYI,EAAEE,OAAOC,QAAQ,WAAKC,QAAQC,IAAI,EAAKV,MAAMC,iBAtBtE,EAAKD,MAAQ,CACXb,SAAS,GACTc,YAAY,IAJlB,E,iFASC,IAAD,OACEU,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAAEnB,SAAU4B,S,+BAgBzC,IAAMC,EAAmBC,KAAKlB,SAC9B,OAEE,yBAAKf,UAAU,OACf,+CACA,kBAAC,EAAD,CACEU,YAAa,eACbC,aAAesB,KAAKtB,eAEtB,kBAAC,EAAD,CAAUR,SAAU6B,S,GAvCNE,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.616f8e85.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nexport const Card = (props) => (\n  <div className='card-container'>\n  <img className='image' alt='Monsters' src={'https://robohash.org/5?set=set2'}/>\n  <h2>{props.Monsters.name}</h2>\n  </div>\n);\n","import React from 'react';\nimport { Card } from '../Card/Card';\nimport './card-list.css';\n\nexport const CardList = props => {\n  return <div className='card-list'>\n    {props.Monsters.map(Monsters=>\n      (<Card key={Monsters.id} Monsters={Monsters}/>))}\n  </div>;\n};\n","import React from 'react';\n\nimport './SearchBox.css';\n\nexport const SearchBox = ({placeholder,handleChange}) =>\n(\n  <input className='search' type='search' placeholder={placeholder} onChange={handleChange}/>\n);\n","import React, { Component } from 'react';\nimport { CardList } from './Components/card-list/card-list.component';\nimport { SearchBox } from './Components/SearchBox/SearchBox-component.jsx';\nimport './App.css';\n\nclass App extends Component {\n  constructor()\n  {\n    super();\n      this.state = {\n        Monsters:[],\n        SearchField:''\n      };\n      // this.Filter = this.Filter.bind(this);\n  }\n  componentDidMount()  //life cycle method\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users=>this.setState({ Monsters: users}))\n  }\n  Filter = () =>\n  {\n    const {Monsters, SearchField} = this.state;\n    const FilteredMonsters = Monsters.filter(Monsters =>\n    Monsters.name.toLowerCase().includes(SearchField.toLowerCase())\n    );\n    return FilteredMonsters;\n  }\n  handleChange = (e) =>\n  {\n    this.setState({SearchField:e.target.value}, ()=>{console.log(this.state.SearchField)});\n  }\n  render()\n  {\n  const FilteredMonsters = this.Filter()\n  return(\n\n    <div className=\"App\">\n    <h1>Monster Rolodex</h1>\n    <SearchBox\n      placeholder ='Monster Name'\n      handleChange ={this.handleChange}\n      />\n    <CardList Monsters={FilteredMonsters} />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}